name: Run benchmarks
on:
    issue_comment:
        types: [created, edited]
    workflow_dispatch:
        inputs:
            repo:
                description: Fork to benchmark "user/repo", empty denotes current repo
                type: string
                default: ""
            ref:
                description: Git branch/tag/reference to benchmark
                type: string
                default: ""
permissions:
    contents: write
    issues: write
    pull-requests: write # For writing the comment
concurrency:
    # Skip intermediate builds: always.
    # Cancel intermediate builds: only if it is a pull request build.
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
    benchmark:
        if: |
            (github.event.issue.pull_request && contains(github.event.comment.body, '/run-benchmark')) ||
            github.event_name == 'workflow_dispatch'
        runs-on: ubuntu-latest
        steps:
            - name: Find PR repo and ref
              uses: actions/github-script@v6
              id: find-ref
              with:
                  script: |
                      if (context.eventName == 'pull_request') {
                          const pr = await github.rest.pulls.get({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            pull_number: context.issue.number
                          })
                          core.setOutput('repo', pr.data.head.repo.full_name)
                          core.setOutput('ref', pr.data.head.ref)
                      }
                      if (context.eventName == 'workflow_dispatch') {
                          if ('${{inputs.repo}}' == "" && ["", "main"].includes('${{inputs.ref}}')) {
                              core.setFailed("cannot run benchmark against current repo's main")
                          }
                          core.setOutput('repo', '${{ inputs.repo }}')
                          core.setOutput('ref', '${{ inputs.ref }}')
                      }
            - uses: actions/github-script@v6
              if: github.event.issue.pull_request
              id: comment-early
              with:
                  script: |
                      const comment = await github.rest.issues.createComment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: context.issue.number,
                        body: Running benchmark...
                      })
                      core.setOutput('id', comment.data.id)
            - uses: actions/checkout@v4
              with:
                  repository: ${{ steps.find-ref.outputs.repo }}
                  ref: ${{ steps.find-ref.outputs.ref }}
            - uses: julia-actions/setup-julia@latest
              with:
                  version: 1
            - uses: julia-actions/julia-buildpkg@latest
            - name: Install dependencies
              run: julia -e 'using Pkg; pkg"add PkgBenchmark BenchmarkCI@0.1"'
            - name: Run benchmarks
              run: julia -e 'using BenchmarkCI; BenchmarkCI.judge(baseline="origin/main")'
            - name: Results
              id: benched
              run: |
                  {
                    echo 'RESULT<<EOF';
                    julia -e 'using BenchmarkCI; BenchmarkCI.displayjudgement()';
                    echo EOF;
                  } >> result.txt
                  cat result.txt >> "$GITHUB_OUTPUT"
                  { echo '```'; sed -e '1d;$d' result.txt; echo '```'; } >> $GITHUB_STEP_SUMMARY
            - uses: actions/github-script@v6
              if: github.event.issue.pull_request
              env:
                  COMMENT_ID: ${{ steps.comment-early.outputs.id }}
              with:
                  script: |
                      const { COMMENT_ID } = process.env
                      github.rest.issues.deleteComment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        comment_id: `${COMMENT_ID}`
                      })
            - uses: actions/github-script@v6
              if: github.event.issue.pull_request
              with:
                  script: |
                      github.rest.issues.createComment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: context.issue.number,
                        body: `\`\`\`\n${{ steps.benched.outputs.RESULT }}\n\`\`\``
                      })
